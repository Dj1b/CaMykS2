<?php
/**
 * @brief Interface for CaMykS database drivers.
 * @details Engine / Object Library
 * @author CaMykS Team <camyks.contact@gmail.com>
 * @version 1.0.1
 * @date Creation: Oct 2019
 * @date Modification: Nov 2019
 * @copyright 2019 CaMykS Team
 * @note This program is distributed as is - WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

/**
 * CDatabaseDriverInterface class.
 */
abstract class CDatabaseDriverInterface {
    /**
     * @var Object $parent
     * @brief Link to parent CDatabaseConnector object.
     */
    protected $parent;

    /**
     * Class constructor.
     * @param Object $parent
     * @return void
     */
    protected function __construct(&$parent) {
        $this->parent = $parent;
    }

    /* Parent methods */

    /**
     * Return parameter value
     * @param string $param
     * @return mixed
     */
    protected function get_param($param) {
        return $this->parent->get_param($param);
    }

    /* Connection methods */

    /**
     * Open connection.
     * @return boolean success
     */
    abstract public function open();

    /**
     * Close connection.
     * @return boolean success
     */
    abstract public function close();

    /* Driver methods */

    /**
     * Return database driver version.
     * @return string
     */
    abstract public function get_driverVersion();

    /* Database methods */

    /**
     * Select database.
     * @param string $name
     * @return boolean success
     */
    abstract public function select_database($name=null);

    /**
     * Check database exists.
     * @param string $name
     * @return boolean success
     */
    abstract public function check_database($name=null);

    /**
     * Create a database.
     * @param string $name
     * @param string $charset
     * @return boolean
     */
    abstract public function create_database($name, $charset='UTF8');

    /**
     * Dump database.
     * @param mixed $file
     * @return mixed
     */
    abstract public function dump_database($file=false);

    /**
     * Return database size.
     * @return integer
     */
    abstract public function get_databaseSize();

    /**
     * Return database summary.
     * @return array
     */
    abstract public function get_databaseSummary();

    /* Table methods */

    /**
     * Return database table list.
     * @return array
     */
    abstract public function get_tableList();

    /**
     * Create a table in the database.
     * @param array $params
     * @return boolean success
     */
    abstract public function create_table($params=array());

    /**
     * Duplicate a table in the database.
     * @param array $params
     * @return boolean success
     */
    abstract public function duplicate_table($params=array());

    /**
     * Drop a table from the database.
     * @param string $name
     * @return boolean success
     */
    abstract public function drop_table($name);

    /**
     * Truncate a table from the database.
     * @param string $name
     * @return boolean success
     */
    abstract public function truncate_table($name);

    /**
     * Modify a table in the database.
     * @param array $params
     * @return boolean success
     */
    abstract public function alter_table($params=array());

    /* Query methods */

    /**
     * Execute direct query.
     * @param string $query
     * @return boolean success
     */
    abstract public function execute_directQuery($query);

    /**
     * Execute prepared query using CQuery builder.
     * @param Object $query
     * @return boolean success
     */
    abstract public function execute_builtQuery($query);

    /**
     * Record given query from connection library to query list
     * @param string $query
     * @return void
     */
    protected function record_query($query) {
        $this->parent->record_query($query);
    }

    /* Query return methods */

    /**
     * Return id generated by last query.
     * @param string $resourceName
     * @return integer
     */
    abstract public function get_queryGeneratedId($resourceName='DefaultResource');

    /**
     * Return next query data line.
     * @param string $resourceName
     * @return array
     */
    abstract public function get_queryDataLine($resourceName='DefaultResource');

    /**
     * Return next query data line with numeric index.
     * @param string $resourceName
     * @return array
     */
    abstract public function get_queryNumDataLine($resourceName='DefaultResource');

    /**
     * Return latest query affected rows.
     * @param string $resourceName
     * @return integer
     */
    abstract public function get_queryAffectedRows($resourceName='DefaultResource');

    /**
     * Return latest query field count.
     * @param string $resourceName
     * @return integer
     */
    abstract public function get_queryFieldCount($resourceName='DefaultResource');

    /**
     * Return latest query field type.
     * @param integer $fIndex
     * @param string $resourceName
     * @return string
     */
    abstract public function get_queryFieldType($fIndex=0, $resourceName='DefaultResource');

    /**
     * Return latest query error.
     * @param string $resourceName
     * @return string
     */
    abstract public function get_queryError($resourceName='DefaultResource');

    /* Ressource methods */

    /**
     * Close ressource.
     * @param string $resourceName
     * @return boolean result
     */
    abstract public function close_ressource($resourceName='DefaultResource');

    /* Data methods */

    /**
     * Return escaped string.
     * @param string $string
     * @return string
     */
    abstract public function escape_string($string='');
}
?>
